{"version":3,"sources":["NavBar.js","App.js","serviceWorker.js","addPatients.js","deletePatients.js","index.js"],"names":["NavBar","props","toggle","bind","state","isOpen","this","setState","Navbar","style","backgroundColor","dark","expand","NavbarBrand","href","Collapse","navbar","Nav","className","NavbarToggler","onClick","UncontrolledDropdown","nav","inNavbar","DropdownToggle","color","marginBottom","marginLeft","caret","DropdownMenu","right","DropdownItem","React","Component","App","Jumbotron","Boolean","window","location","hostname","match","addPatients","onFormSubmit","event","preventDefault","Name","LastName","alert","axios","post","params","then","response","data","json","Patients","error","handleInputChange","get","target","name","value","patientRows","map","patients","Row","Col","sm","Card","verticalAlign","margin","padding","display","horizontalAlign","CardHeader","CardBody","Form","FormGroup","Label","for","Input","onChange","width","type","id","required","Button","Table","deletePatients","routing","path","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca5dd1d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    DropdownItem, \r\n    DropdownToggle, \r\n    UncontrolledDropdown, \r\n    DropdownMenu,\r\n    Badge,\r\n    NavLink } from 'reactstrap';\r\n    \r\n\r\nexport default class NavBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n          isOpen: false, \r\n        };\r\n      }\r\n      toggle(props) {\r\n        this.setState({\r\n          isOpen: !this.state.isOpen\r\n        });\r\n      }\r\n\r\n    render() {\r\n        return <div> <Navbar style = {{backgroundColor: \"#7F3F98\"}} dark expand =\"md\">\r\n            <NavbarBrand href = \"/\">Hospital Patient Portal</NavbarBrand>\r\n            \r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n\r\n                <Nav className = \"ml-auto\" navbar>\r\n                <NavbarToggler onClick={this.toggle}/>\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle style = {{color: \"white\", marginBottom: \"-10%\", marginLeft: \"-17px\"}}  nav caret >\r\n                Menu\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem href = \"/addPatients\">\r\n                  Add\r\n                </DropdownItem>\r\n                <DropdownItem href = '/deletePatients'>\r\n                    Delete\r\n                </DropdownItem>\r\n                </DropdownMenu></UncontrolledDropdown>\r\n                    \r\n                </Nav> \r\n            </Collapse>\r\n                 </Navbar>\r\n            </div>\r\n    }\r\n}","import React, { Component } from 'react';\nimport NavBar from './NavBar';\nimport { Jumbotron, Button } from 'reactstrap';\nclass App extends Component {\n\n  render() {\n    \n    ;\n    return  <div>\n        <NavBar />\n        <div>\n          <Jumbotron>\n            <h1 className=\"display-3\">Welcome, personnel!</h1>\n            <p className=\"lead\">This is a portal which is used to maintain patient names. </p>\n            <hr className=\"my-2\" />\n            <p>Use the dropdown menu on the top right to navigate to Add or Delete Patients. </p>\n            <p className=\"lead\">\n              Note that you're handling very sensitive information, please be very careful. \n            </p>\n          </Jumbotron>\n        </div>\n\n\n    </div>\n    \n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport {\r\n    Card, Button, CardHeader, CardBody,\r\n     Form, FormGroup, Label, Input, Row, Col, Table} from 'reactstrap';\r\nimport NavBar from './NavBar';\r\nimport axios from 'axios';\r\n\r\nexport default class addPatients extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Name: '',\r\n            LastName: '',\r\n            Patients: [],\r\n            error: 0\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    }\r\n    componentDidMount(props){\r\n        axios.get('http://127.0.0.1:5000/api/addPatient')\r\n        .then(response => response.data)\r\n        .then(json => this.setState({Patients: json}))\r\n    }\r\n   \r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const name = target.name;\r\n        const value = target.value;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    onFormSubmit = event => {\r\n        event.preventDefault();\r\n        if((this.state.Name=='')|(this.state.LastName=='')){\r\n            alert('Please check your input fields');\r\n        }\r\n        else{\r\n        axios.post('http://127.0.0.1:5000/api/addPatient', null, {\r\n            params: {\r\n                Name: this.state.Name,\r\n                LastName: this.state.LastName,\r\n            }\r\n        })\r\n        .then(response => response.data)\r\n        .then(json => this.setState({Patients: json}))\r\n    }\r\n    \r\n}\r\n\r\n    render() {\r\n        var patients = this.state.Patients\r\n        var patientRows = patients.map(function(patients){\r\n            return (<tr>\r\n              <td>{patients[0]}</td>\r\n              <td>{patients[2]}</td>\r\n              <td>{patients[1]}</td>\r\n            </tr>\r\n            )\r\n          })\r\n        return <div><NavBar />\r\n            <Row>\r\n                <Col sm=\"6\">\r\n            <Card style={{\r\n                verticalAlign: 'center',\r\n                margin: '10px',\r\n                padding: 5,\r\n                display: 'block',\r\n                horizontalAlign: 'center'\r\n            }}>\r\n                <CardHeader style={{ backgroundColor: '#6495ED', color: 'white'}}><strong>Add Patient</strong></CardHeader>\r\n\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"email\">First Name</Label>\r\n                            <Input onChange={this.handleInputChange} style={{ width: \"100%\" }} type=\"string\" name=\"Name\" id=\"Name\" value={this.state.Name} required />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"password\">Last Name</Label>\r\n                            <Input onChange={this.handleInputChange} style={{ width: \"100%\" }} type=\"string\" name=\"LastName\" id=\"LastName\" value={this.state.LastName} required />\r\n                        </FormGroup>\r\n                        <Button style={{\r\n                        verticalAlign: 'center',\r\n                        margin: 'auto',\r\n                        padding: 10,\r\n                        display: 'block',\r\n                        horizontalAlign: 'center',\r\n                        width: \"12.5%\"\r\n                    }} color = \"success\" type=\"submit\" onClick={this.onFormSubmit}>Add</Button>\r\n                    </Form>\r\n                </CardBody>\r\n            </Card>\r\n            </Col>\r\n            <Col sm = \"6\">\r\n            <Card style={{\r\n                margin: '10px',\r\n                padding: 5,\r\n                display: 'block',\r\n                \r\n            }}>\r\n\r\n                <CardHeader style={{ backgroundColor: '#6495ED', color: 'white'}}><strong>Patient Records</strong></CardHeader>\r\n                <CardBody>\r\n                <Table style = {{marginBottom: \"-5%\"}}>\r\n      <thead>\r\n        <tr>\r\n          <th >PID</th>\r\n          <th>First name</th>\r\n          <th>Last Name</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n              {patientRows}\r\n            </tbody>\r\n            <br/>\r\n            </Table>\r\n            </CardBody>\r\n            </Card>\r\n            </Col>\r\n            </Row>\r\n        </div >\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {\r\n    Card, Button, CardHeader, CardBody,\r\n     Form, FormGroup, Label, Input, Row, Col, Table} from 'reactstrap';\r\nimport NavBar from './NavBar';\r\nimport axios from 'axios';\r\n\r\nexport default class deletePatients extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Name: '',\r\n            LastName: '',\r\n            Patients: [],\r\n            error: 0\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    }\r\n    componentDidMount(props){\r\n        axios.get('http://127.0.0.1:5000/api/deletePatient')\r\n        .then(response => response.data)\r\n        .then(json => this.setState({Patients: json}))\r\n    }\r\n   \r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const name = target.name;\r\n        const value = target.value;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    onFormSubmit = event => {\r\n        event.preventDefault();\r\n        if((this.state.Name=='')|(this.state.LastName=='')){\r\n            alert('Please check your input fields');\r\n        }\r\n        else{\r\n        axios.post('http://127.0.0.1:5000/api/deletePatient', null, {\r\n            params: {\r\n                Name: this.state.Name,\r\n                LastName: this.state.LastName,\r\n            }\r\n        })\r\n        .then(response => response.data)\r\n        .then(json => this.setState({Patients: json}))\r\n    }\r\n}\r\n\r\n    render() {\r\n        var patients = this.state.Patients\r\n        var patientRows = patients.map(function(patients){\r\n            return (<tr>\r\n              <td>{patients[0]}</td>\r\n              <td>{patients[2]}</td>\r\n              <td>{patients[1]}</td>\r\n            </tr>\r\n            )\r\n          })\r\n        return <div><NavBar />\r\n            <Row>\r\n                <Col sm=\"6\">\r\n            <Card style={{\r\n                verticalAlign: 'center',\r\n                margin: '10px',\r\n                padding: 5,\r\n                display: 'block',\r\n                horizontalAlign: 'center'\r\n            }}>\r\n                <CardHeader style={{ backgroundColor: '#6495ED', color: 'white'}}><strong>Add Patient</strong></CardHeader>\r\n\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"email\">First Name</Label>\r\n                            <Input onChange={this.handleInputChange} style={{ width: \"100%\" }} type=\"string\" name=\"Name\" id=\"Name\" value={this.state.Name} required />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"password\">Last Name</Label>\r\n                            <Input onChange={this.handleInputChange} style={{ width: \"100%\" }} type=\"string\" name=\"LastName\" id=\"LastName\" value={this.state.LastName} required />\r\n                        </FormGroup>\r\n                        <Button style={{\r\n                        verticalAlign: 'center',\r\n                        margin: 'auto',\r\n                        padding: 10,\r\n                        display: 'block',\r\n                        horizontalAlign: 'center',\r\n                        width: \"12.5%\"\r\n                    }} color = \"danger\" type=\"submit\" onClick={this.onFormSubmit}>Delete</Button>\r\n                    </Form>\r\n                </CardBody>\r\n            </Card>\r\n            </Col>\r\n            <Col sm = \"6\">\r\n            <Card style={{\r\n                margin: '10px',\r\n                padding: 5,\r\n                display: 'block',\r\n                \r\n            }}>\r\n\r\n                <CardHeader style={{ backgroundColor: '#6495ED', color: 'white'}}><strong>Patient Records</strong></CardHeader>\r\n                <CardBody>\r\n                <Table style = {{marginBottom: \"-5%\"}}>\r\n      <thead>\r\n        <tr>\r\n          <th >PID</th>\r\n          <th>First name</th>\r\n          <th>Last Name</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n              {patientRows}\r\n            </tbody>\r\n            <br/>\r\n            </Table>\r\n            </CardBody>\r\n            </Card>\r\n            </Col>\r\n            </Row>\r\n        </div >\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport addPatients from './addPatients';\nimport deletePatients from './deletePatients'\nconst routing = (<Router>\n    <div>\n    <Route path=\"/\" exact = {true} component={App}/>\n    <Route path=\"/addPatients\" exact = {true} component={addPatients}/>\n    <Route path=\"/deletePatients\" exact = {true} component={deletePatients}/>\n    </div>\n</Router>)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}